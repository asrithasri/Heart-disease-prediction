# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16GBYH-WteYsAn6n75nZMgvvMtCePYgYZ

Importing the dependencies
"""

import numpy as np                                           
import pandas as pd                                                #usefull for creating data frame or structured tables
from sklearn.model_selection import train_test_split              
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score      #to evaluate our model how well our model is performing

"""Data collection and processing

"""

# Loading the csv data to a pandas DataFrame
heart_data = pd.read_csv('/content/heart.csv')   #reads csv file and store it in a panda data file

#print first 5 rows of dataset
heart_data.head()

#print last 5 rows of the data set
heart_data.tail()

# number of rows and columns in dataset
heart_data.shape

# getting  info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measure of the data    #this function will give us means ,SD,ect
heart_data.describe()

#checking the distribution of target variable
heart_data['target'].value_counts()

"""1 ---> Defective Heart
0 ---> Healthy Heart
"""



"""Splitting the Features and Target

"""

X = heart_data.drop(columns='target',axis=1)
Y =heart_data['target']

print(X)

print(Y)

"""Splitting the Data into training Data & Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, stratify=Y ,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

LogisticRegression
"""

model = LogisticRegression()

#training  the LogisticRegression model with Training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy model
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print ('Accuracy on training data :',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print ('Accuracy on test data :',test_data_accuracy)

"""Building the predictive system"""

input_data = (46,1,0,1200,249,0,0,1444,3,0.8,2,0,3)

# change the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
# reshape the numpy array as we predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The Person does not have a Heart Disease')
else:
   print('The Person has a chance of Heart Disease')

